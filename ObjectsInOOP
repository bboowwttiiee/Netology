import UIKit

//Задача 1
/*
 Придумайте именованные типы Swift, подбирая лучшие абстракции. Объявите свойства и методы в них.
 Статический анализатор подскажет, если вы забудете кое-что ('Type annotation missing...').
 */

// Для обозначения мастей карт подходит перечисление enum, так как они в ограниченном количестве и их немного
enum CardSuits {
    case diamonds
    case clubs
    case hearts
    case spades
}

// Для исследований подходит структура, так как этот шаблон используется многократно для разных видов исследований
struct Study {
    let name: String
    let age: Int
    let gender: Bool
    let participatedInOtherStudies: Bool
}

// Для позиции подходит класс, так как в нем используются свойства для хранения данных о сотруднике и методы для подсчета его навыков и ЗП
class Manager {
    let name: String
    let surname: String
    let workExperience: Int
    
    init(name: String, surname: String, workExperience: Int) {
        self.name = name
        self.surname = surname
        self.workExperience = workExperience
    }
    
    func workingSkills(workExperience: Int) -> Double {
        let workingSkills = 10 * workExperience
        return Double(workingSkills)
    }
    
    func salary(workExperience: Int, workingSkills: Double) -> Int {
        return workExperience * Int(workingSkills)
    }
}


// Задача 2
/*
 Напишите по 2 примера композиции и агрегации из реального мира, без использования кода.
 Каждому примеру дайте объяснения почему это композиция или агрегация.
 */

/*
 Примером композиции из реального мира может быть комната и стены в ней. Стены не могут существовать вне комнаты.
 То есть стена всегда будет создаваться внутри объекта комната.
 Еще одним примером композиции будет двигатель и механизм, использующий этот двигатель (например, автомобиль или комбайн).
 Без двигателя не будет работать механизм. Машина и двигатель конечно могут существовать друг без друга, но суть не в этом.
 А в том что при конкретной реализации рабочей машины, один двигатель может принадлежать только одной машине,
 поэтому для такой связи логично использовать композицию.
 
 Примером агрегации может быть все тот же двигатель и его части, которые даже без наличия двигателя
 могут быть применены в другом механизме.
 Для еще одного примера агрегации возмем Макдоналдс. Ресторан не может работать без клиетов,
 но при этом клиенты без Макдоналдса легко обойдутся – просто пойдут в другой ресторан.
 */
